name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - run: cargo fmt --all -- --check

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
      - run: cargo test --all-features --workspace
  udeps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-udeps
        uses: taiki-e/install-action@cargo-udeps
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}-nightly
      - name: Check unused dependencies on default features
        run: RUSTFLAGS="--cfg fuzzing" cargo udeps

      - name: Check unused dependencies on all features
        run: RUSTFLAGS="--cfg fuzzing" cargo udeps --all-features

  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get MSRV from package metadata
        id: msrv
        run: grep rust-version Cargo.toml | cut -d'"' -f2 | sed 's/^/version=/' >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}-${{ steps.msrv.outputs.version }}
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.version }}
          components: rustfmt, clippy

      - name: check crates
        run: cargo check --all-features

  feature_set:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install cargo-hack
        run: cargo install cargo-hack

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      - name: check --feature-powerset
        run: cargo hack check --feature-powerset --no-dev-deps -p socketioxide -p engineioxide -p socketioxide-redis

  examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            examples/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('examples/Cargo.lock') }}-examples
      - run: cd examples && cargo check --all-features

  rust-clippy-analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}-clippy

      - name: Install required cargo                                                                                                                                                                                                      â”‚
        run: cargo install clippy-sarif sarif-fmt || true

      - name: Run rust-clippy
        run: cargo clippy
          --all-features
          --tests
          --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true

  engine_io:
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        engineio-version: [v3, v4]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}-release
      - name: Install deps & run tests
        run: |
          cd e2e/engineioxide/test-suites && npm install && cd ../../..
          cargo build -p engineioxide-e2e --bin engineioxide-e2e -F ${{ matrix.engineio-version }} -r
          cargo run -p engineioxide-e2e --bin engineioxide-e2e -F ${{ matrix.engineio-version }} -r > server.txt && sleep 1 & \
          node --test --test-reporter=spec --experimental-strip-types e2e/engineioxide/test-suites/${{ matrix.engineio-version }}.ts > client.txt
      - name: Server output
        if: always()
        run: cat server.txt
      - name: Client output
        if: always()
        run: cat client.txt

  socket_io:
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        socketio-version: [v4, v5, v5-msgpack]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}-release
      - name: Install deps & run tests
        run: |
          PARSER=$(echo ${{ matrix.socketio-version }} | cut -d'-' -f2 -s)
          VERSION=$(echo ${{ matrix.socketio-version }} | cut -d'-' -f1)
          cd e2e/socketioxide/test-suites && npm install && cd ../../..
          cargo build -p socketioxide-e2e --bin socketioxide-e2e -F $VERSION,$PARSER -r
          cargo run -p socketioxide-e2e --bin socketioxide-e2e -F $VERSION,$PARSER -r > server.txt && sleep 1 & \
          node --test --test-reporter=spec --experimental-strip-types e2e/socketioxide/test-suites/${{ matrix.socketio-version }}.ts > client.txt
      - name: Server output
        if: always()
        run: cat server.txt
      - name: Client output
        if: always()
        run: cat client.txt

  adapter:
    runs-on: ubuntu-latest
    needs: [socket_io, engine_io]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}-adapter
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: install adapter infra
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: ./.github/workflows/adapter-ci/docker-compose.yml
      - run: cd e2e/adapter && npm install

      - name: Run all adapter tests
        run: |
          cargo build -p adapter-e2e
          cargo run -p adapter-e2e --bin main

      - name: Upload server output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs
          path: e2e/adapter/logs/*.log
  all_passed:
    runs-on: ubuntu-latest
    needs:
      [adapter, feature_set, format, udeps, msrv, examples, rust-clippy-analyze]
    steps:
      - name: All passed
        run: echo "All tests passed"
